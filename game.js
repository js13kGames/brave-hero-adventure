// Generated by CoffeeScript 1.6.3
(function() {
  var Action, ActionBar, ActionCounterBar, ActionManager, AnotherActionAction, AttackAction, Button, DisplayObject, Enemy, Entity, GC, Game, HealthBar, Hero, Layer, Loader, Map, MapRenderer, MoveAction, MoveFowardAction, MoveLeftAction, MoveRightAction, PotionAction, Stage, Text, stage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  GC = window._GAME_CONSTATS_ = {
    author: 'Kamil Misiowiec'
  };

  DisplayObject = (function() {
    function DisplayObject(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.width = 0;
      this.height = 0;
    }

    DisplayObject.prototype.draw = function(ctx) {
      throw new Error('Draw method should be overriden');
    };

    return DisplayObject;

  })();

  Layer = (function(_super) {
    __extends(Layer, _super);

    function Layer() {
      Layer.__super__.constructor.apply(this, arguments);
      this.childs = [];
    }

    Layer.prototype.draw = function(ctx) {
      var child, _i, _len, _ref;
      ctx.save();
      ctx.translate(this.x, this.y);
      _ref = this.childs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.draw(ctx);
      }
      return ctx.restore();
    };

    Layer.prototype.addChild = function(child) {
      return this.childs.push(child);
    };

    Layer.prototype.removeChild = function(child) {
      return this.childs.splice(this.childs.indexOf(child), 1);
    };

    Layer.prototype.onMouseDown = function(x, y) {
      var child, _i, _len, _ref;
      _ref = this.childs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child instanceof Layer) {
          child.onMouseDown(x, y);
        } else if ((child.x + this.x < x && x < child.x + this.x + child.width) && (child.y + this.y < y && y < child.y + this.y + child.height)) {
          if (typeof child.onMouseDown === "function") {
            child.onMouseDown();
          }
        }
      }
    };

    return Layer;

  })(DisplayObject);

  Stage = (function(_super) {
    __extends(Stage, _super);

    function Stage() {
      var canvas, rest;
      canvas = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.canvas = canvas;
      Stage.__super__.constructor.apply(this, rest);
      this.ctx = this.canvas.getContext('2d');
      this.ctx.webkitImageSmoothingEnabled = false;
      this.ctx.mozImageSmoothingEnabled = false;
      this.ctx.scale(2, 2);
      this.width = this.canvas.width / 2;
      this.height = this.canvas.height / 2;
      this.canvas.addEventListener('mousedown', this._onMouseDown.bind(this));
    }

    Stage.prototype.render = function() {
      return this.draw(this.ctx);
    };

    Stage.prototype._onMouseDown = function(event) {
      var mouseX, mouseY;
      mouseX = event.pageX - this.canvas.offsetLeft;
      mouseY = event.pageY - this.canvas.offsetTop;
      return this.onMouseDown(mouseX / 2, mouseY / 2);
    };

    return Stage;

  })(Layer);

  Text = (function(_super) {
    __extends(Text, _super);

    function Text(text, font, color) {
      this.text = text;
      this.font = font != null ? font : '20px Arial';
      this.color = color != null ? color : 'black';
      Text.__super__.constructor.call(this);
    }

    Text.prototype.draw = function(ctx) {
      ctx.font = this.font;
      ctx.fillStyle = this.color;
      return ctx.fillText(this.text, this.x, this.y);
    };

    return Text;

  })(DisplayObject);

  Loader = (function() {
    function Loader() {}

    Loader.images = {};

    Loader.load = function(files) {
      var file, _i, _len;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (!(this.images[file] == null)) {
          continue;
        }
        this.images[file] = new Image;
        this.images[file].src = file;
      }
      return this._checkIfReady();
    };

    Loader.onready = null;

    Loader._checkIfReady = function() {
      var img, src, _ref;
      _ref = this.images;
      for (src in _ref) {
        img = _ref[src];
        if (!img.complete) {
          return setTimeout(this._checkIfReady.bind(this), 50);
        }
      }
      return this.onready();
    };

    return Loader;

  })();

  Entity = (function() {
    function Entity(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.set({
        hp: 0,
        level: 0,
        id: 32
      });
    }

    Entity.prototype.set = function(obj) {
      var prop, val;
      for (prop in obj) {
        val = obj[prop];
        this[prop] = val;
      }
    };

    return Entity;

  })();

  Map = (function() {
    Map.Obstacle = [0];

    function Map() {
      var char, e, enemy, map, row, tile, x, y, _i, _j, _k, _l, _len, _len1;
      this.data = [];
      this.enemies = [];
      for (y = _i = 0; _i <= 100; y = ++_i) {
        row = [];
        this.data.push(row);
        for (x = _j = 0; _j <= 9; x = ++_j) {
          row.push([[((Math.random() * 4) | 0) + 1], []]);
        }
      }
      map = ['@@@@@@@@@@', '@@@@@@@@@@', '@@@@@@@@@@', '@@@@@@@@@@', '@@@@@@@@@@', '@@@@@@@@@@', '@@@@@@@@@@', '@@@@@@@@@@', '@@@@@@@@@@', '@@@@@@@@@@', '@@@@@@@@@@', '@@...r..@@', '@@......@@', '@@@@@|@@@@', '....e|e...', '.....|....', '...>-]....', '..q|.q....', '...[---<..', '..@@@@@|..', 'w.@@@@@|.e', '..@@@@@|..', '.w..>--]e.', '...>].....', '@..|@q....', '.@@|@@....', '@@@|@@@@@@', '..e|......', '...|..w...', '@q@[<.....', '@@@@[<..e.', '@@@@@[<...', '@@@@@@|.q.', '@@.@@@|...', '@@@@@>]...', '.@@@>]..w.', '...@|.w...', '.q..|....@', '....|.q.@@', '...>]....@', '..q|..q...', '@.@[<...w.', '@@@@[<....', '@@@@@[<..q', '@@@@@@|...', '@@.@@@|.q.', '@@@@@>]...', '.@@@>]..q.', '...@|....@', '....|....@', '....|...@@', '....|...@@'];
      tile = {
        '@': 0,
        '|': 16,
        '>': 21,
        ']': 20,
        '[': 18,
        '<': 17,
        '-': 19
      };
      enemy = {
        'q': 48,
        'w': 49,
        'e': 50,
        'r': 51
      };
      for (y = _k = 0, _len = map.length; _k < _len; y = ++_k) {
        row = map[y];
        for (x = _l = 0, _len1 = row.length; _l < _len1; x = ++_l) {
          char = row[x];
          if (tile[char] !== void 0) {
            this.data[y][x][0].push(tile[char]);
          } else if (enemy[char]) {
            e = new Enemy(enemy[char]);
            this.enemies.push(e);
            this.addEntity(e, x, y);
          }
        }
      }
    }

    Map.prototype.canIMoveTo = function(x, y) {
      return (0 < x && x < 10) && (0 < y && y < this.data.length) && !(this.data[y][x][0].some(function(obj) {
        return __indexOf.call(Map.Obstacle, obj) >= 0;
      }) || this.data[y][x][1].length > 0);
    };

    Map.prototype.isSomeoneOn = function(x, y) {
      return this.data[y][x][1].some(function(e, i) {
        return i > 0 && (e != null);
      });
    };

    Map.prototype.getEntitiesAt = function(x, y) {
      return this.data[y][x][1];
    };

    Map.prototype.getEntitesAround = function(x, y) {
      return this.enemies.filter(function(enemy) {
        var _ref, _ref1;
        return (x - 1 <= (_ref = enemy.x) && _ref <= x + 1) && (y - 1 <= (_ref1 = enemy.y) && _ref1 <= y + 1);
      });
    };

    Map.prototype.removeEntity = function(entity) {
      var e, i, _i, _len, _r, _ref;
      (_r = this.data[entity.y][entity.x][1]).splice(_r.indexOf(entity), 1);
      _ref = this.enemies;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        e = _ref[i];
        if (e.pesel === entity.pesel) {
          this.enemies.splice(i, 1);
          return;
        }
      }
    };

    Map.prototype.addEntity = function(entity, x, y) {
      var _base;
      entity.x = x;
      entity.y = y;
      return ((_base = this.data[y][x])[1] != null ? (_base = this.data[y][x])[1] : _base[1] = []).push(entity);
    };

    Map.prototype.moveTo = function(entity, x, y) {
      var endTile, startTile;
      if (!this.canIMoveTo(x, y)) {
        return;
      }
      startTile = this.getEntitiesAt(entity.x, entity.y);
      endTile = this.getEntitiesAt(x, y);
      startTile.splice(startTile.indexOf(entity), 1);
      entity.set({
        x: x,
        y: y
      });
      endTile.push(entity);
    };

    return Map;

  })();

  MapRenderer = (function(_super) {
    __extends(MapRenderer, _super);

    function MapRenderer() {
      var map, rest;
      map = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.map = map;
      MapRenderer.__super__.constructor.apply(this, rest);
      this.srcImg = Loader.images['img/tiles.png'];
    }

    MapRenderer.prototype.draw = function(ctx) {
      var entity, layer, row, sx, sy, tile, x, y, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
      ctx.save();
      ctx.translate(this.x, this.y);
      _ref = this.map.data;
      for (y = _i = 0, _len = _ref.length; _i < _len; y = ++_i) {
        row = _ref[y];
        for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
          layer = row[x];
          _ref1 = layer[0];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            tile = _ref1[_k];
            sx = tile % 16;
            sy = (tile / 16) | 0;
            ctx.drawImage(this.srcImg, sx * 16, sy * 16, 16, 16, x * 16, y * 16, 16, 16);
          }
          _ref2 = layer[1];
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            entity = _ref2[_l];
            sx = entity.id % 16;
            sy = (entity.id / 16) | 0;
            ctx.drawImage(this.srcImg, sx * 16, sy * 16, 16, 16, x * 16, y * 16, 16, 16);
          }
        }
      }
      return ctx.restore();
    };

    return MapRenderer;

  })(DisplayObject);

  Hero = (function(_super) {
    __extends(Hero, _super);

    function Hero() {
      Hero.__super__.constructor.apply(this, arguments);
      this.id = 32;
      this.hp = 3;
    }

    return Hero;

  })(Entity);

  Enemy = (function(_super) {
    __extends(Enemy, _super);

    Enemy.lastEnemyPesel = 0;

    Enemy.hitpointsById = {
      48: 1,
      49: 3,
      50: 4,
      51: 8
    };

    Enemy.damageById = {
      48: 1,
      49: 2,
      50: 2,
      51: 3
    };

    function Enemy(id) {
      if (id == null) {
        id = 48;
      }
      Enemy.__super__.constructor.apply(this, arguments);
      this.id = id;
      this.pesel = Enemy.lastEnemyPesel++;
      this.hp = Enemy.hitpointsById[id];
    }

    Enemy.prototype.hit = function() {
      if (!(--this.hp < 1)) {
        return;
      }
      Game.Ctx.map.removeEntity(this);
      Game.Ctx.map.data[this.y][this.x][0].push(80);
      if (this.id === 51) {
        return setTimeout(Game.Ctx.onGameWin.bind(Game.Ctx, 0));
      }
    };

    Enemy.prototype.update = function(hero, map) {
      var dist, _ref, _ref1;
      dist = {
        x: hero.x - this.x,
        y: hero.y - this.y
      };
      if (Math.abs(dist.x) < 3 && Math.abs(dist.y) < 3) {
        map.moveTo(this, this.x + (dist.x / Math.abs(dist.x)), this.y + (dist.y / Math.abs(dist.y)));
      } else {
        map.moveTo(this, this.x + Math.round(Math.random() * 3 - 1.5), this.y);
      }
      if ((this.x - 1 <= (_ref = hero.x) && _ref <= this.x + 1) && (this.y - 1 <= (_ref1 = hero.y) && _ref1 <= this.y + 1)) {
        hero.hp -= Enemy.damageById[this.id];
        if (hero.hp < 1) {
          setTimeout(Game.Ctx.onGameEnd.bind(Game.Ctx, 0));
        }
      }
    };

    Enemy.prototype._distnaceToHero = function(hero, map) {
      return {
        x: hero.x - this.x,
        y: hero.y - this.y
      };
    };

    return Enemy;

  })(Entity);

  Game = (function() {
    Game.Ctx = null;

    function Game() {
      Game.Ctx = this;
      this.map = new Map;
      this.hero = new Hero;
      this.actionManager = new ActionManager;
      this.map.addEntity(this.hero, 4, 48);
      this.mapRenderer = new MapRenderer(this.map);
      this.actionBar = new ActionBar(this.actionManager);
      this.actionBar.update();
      this.healthBar = new HealthBar(this.hero.hp);
      this.actionCounterBar = new ActionCounterBar(Action.movesLeft);
      GC.stage.addChild(this.mapRenderer);
      GC.stage.addChild(this.actionBar);
      GC.stage.addChild(this.healthBar);
      GC.stage.addChild(this.actionCounterBar);
    }

    Game.prototype.makeStep = function() {
      var enemy, _i, _len, _ref;
      _ref = this.map.enemies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        enemy = _ref[_i];
        enemy.update(this.hero, this.map);
      }
      this.actionBar.update();
      this.actionCounterBar.update(Action.movesLeft);
      this.healthBar.update(this.hero.hp);
      return this.render();
    };

    Game.prototype.render = function() {
      this.mapRenderer.y = -(this.hero.y - 9) * 16;
      return GC.stage.render();
    };

    Game.prototype.onGameEnd = function() {
      GC.stage.ctx.drawImage(Loader.images['img/gameover.png'], 0, 0);
      return GC.stage.childs = [];
    };

    Game.prototype.onGameWin = function() {
      GC.stage.ctx.drawImage(Loader.images['img/gamewin.png'], 0, 0);
      return GC.stage.childs = [];
    };

    return Game;

  })();

  Action = (function() {
    Action.lastID = 0;

    Action.movesLeft = 2;

    function Action(icon) {
      this.icon = icon != null ? icon : 0;
      this.id = Action.lastID++;
    }

    Action.prototype.execute = function(callbackOnReady) {
      this._execute();
      return callbackOnReady();
    };

    Action.prototype._execute = function() {
      throw new Error('This method should be overriden');
    };

    Action.prototype["do"] = function() {
      var actions, next,
        _this = this;
      actions = [this].concat(this._getComboActions());
      return (next = function(i) {
        if (i === actions.length) {
          return _this._done();
        } else {
          return actions[i].execute(function() {
            Game.Ctx.actionManager.replaceWithNew(actions[i]);
            return next(i + 1);
          });
        }
      })(0);
    };

    Action.prototype._done = function() {
      Action.movesLeft -= 1;
      Game.Ctx.actionCounterBar.update(Action.movesLeft);
      if (Action.movesLeft < 1) {
        Action.movesLeft = 2;
        return Game.Ctx.makeStep();
      } else {
        Game.Ctx.actionBar.update();
        return Game.Ctx.render();
      }
    };

    Action.prototype._getComboActions = function() {
      var combo,
        _this = this;
      combo = [];
      Game.Ctx.actionManager.currentActions.forEach(function(action, i) {
        if (action.id === _this.id) {
          return combo = _this._countLeft(i - 1).concat(_this._countRight(i + 1));
        }
      });
      return combo;
    };

    Action.prototype._countLeft = function(i) {
      var act;
      if (!(i >= 0)) {
        return [];
      }
      act = Game.Ctx.actionManager.currentActions[i];
      if (act instanceof this.constructor) {
        return [act].concat(this._countLeft(i - 1));
      } else {
        return [];
      }
    };

    Action.prototype._countRight = function(i) {
      var act;
      if (!(i < Game.Ctx.actionManager.currentActions.length)) {
        return [];
      }
      act = Game.Ctx.actionManager.currentActions[i];
      if (act instanceof this.constructor) {
        return [act].concat(this._countRight(i + 1));
      } else {
        return [];
      }
    };

    return Action;

  })();

  AttackAction = (function(_super) {
    __extends(AttackAction, _super);

    function AttackAction() {
      AttackAction.__super__.constructor.call(this, 0);
    }

    AttackAction.prototype._execute = function() {
      var x, y, _ref;
      _ref = Game.Ctx.hero, x = _ref.x, y = _ref.y;
      return Game.Ctx.map.getEntitesAround(x, y).forEach(function(enemy) {
        return enemy.hit();
      });
    };

    return AttackAction;

  })(Action);

  PotionAction = (function(_super) {
    __extends(PotionAction, _super);

    function PotionAction() {
      PotionAction.__super__.constructor.call(this, 6);
    }

    PotionAction.prototype._execute = function() {
      var hp;
      if (Game.Ctx.hero.hp < 10) {
        hp = Game.Ctx.hero.hp += 1;
        return Game.Ctx.healthBar.update(hp);
      }
    };

    return PotionAction;

  })(Action);

  AnotherActionAction = (function(_super) {
    __extends(AnotherActionAction, _super);

    function AnotherActionAction() {
      AnotherActionAction.__super__.constructor.call(this, 7);
    }

    AnotherActionAction.prototype._execute = function() {
      var left;
      if (!(Action.movesLeft < 4)) {
        return;
      }
      left = Action.movesLeft += 2;
      Game.Ctx.actionCounterBar.update(left);
      return GC.stage.render();
    };

    return AnotherActionAction;

  })(Action);

  MoveAction = (function(_super) {
    __extends(MoveAction, _super);

    function MoveAction() {
      MoveAction.__super__.constructor.call(this, 5);
    }

    MoveAction.prototype.execute = function(callbackOnReady) {
      var _this = this;
      return Game.Ctx.actionBar.askForDirection(function(action) {
        action._execute();
        Game.Ctx.render();
        return callbackOnReady();
      });
    };

    return MoveAction;

  })(Action);

  MoveFowardAction = (function(_super) {
    __extends(MoveFowardAction, _super);

    function MoveFowardAction() {
      MoveFowardAction.__super__.constructor.call(this, 1);
    }

    MoveFowardAction.prototype._execute = function() {
      var x, y, _ref;
      _ref = Game.Ctx.hero, x = _ref.x, y = _ref.y;
      return Game.Ctx.map.moveTo(Game.Ctx.hero, x, y - 1);
    };

    return MoveFowardAction;

  })(Action);

  MoveLeftAction = (function(_super) {
    __extends(MoveLeftAction, _super);

    function MoveLeftAction() {
      MoveLeftAction.__super__.constructor.call(this, 3);
    }

    MoveLeftAction.prototype._execute = function() {
      var x, y, _ref;
      _ref = Game.Ctx.hero, x = _ref.x, y = _ref.y;
      return Game.Ctx.map.moveTo(Game.Ctx.hero, x - 1, y);
    };

    return MoveLeftAction;

  })(Action);

  MoveRightAction = (function(_super) {
    __extends(MoveRightAction, _super);

    function MoveRightAction() {
      MoveRightAction.__super__.constructor.call(this, 2);
    }

    MoveRightAction.prototype._execute = function() {
      var x, y, _ref;
      _ref = Game.Ctx.hero, x = _ref.x, y = _ref.y;
      return Game.Ctx.map.moveTo(Game.Ctx.hero, x + 1, y);
    };

    return MoveRightAction;

  })(Action);

  ActionManager = (function() {
    function ActionManager() {
      this._ActionClasses = [MoveAction, AttackAction, AnotherActionAction, PotionAction];
      this.currentActions = [];
      this.reset();
    }

    ActionManager.prototype.reset = function() {
      var i, _i, _results;
      this.currentActions = [];
      _results = [];
      for (i = _i = 0; _i < 5; i = ++_i) {
        _results.push(this.currentActions.push(this._getNewRandomAction()));
      }
      return _results;
    };

    ActionManager.prototype.replaceWithNew = function(old) {
      var i;
      i = this.currentActions.indexOf(old);
      return this.currentActions[i] = this._getNewRandomAction();
    };

    ActionManager.prototype._getNewRandomAction = function() {
      var chance, i, len, lot, rnd, sum, x, _i, _len;
      len = this._ActionClasses.length;
      lot = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 1; _i <= len; x = _i += 1) {
          _results.push(Math.pow(2.5, x));
        }
        return _results;
      })();
      lot.reverse();
      lot[0] = lot[0] / 2 + 1;
      rnd = Math.random() * lot.reduce(function(a, b) {
        return a + b;
      });
      sum = 0;
      for (i = _i = 0, _len = lot.length; _i < _len; i = ++_i) {
        chance = lot[i];
        sum += chance;
        if (sum > rnd) {
          return new this._ActionClasses[i];
        }
      }
      return;
      return new this._ActionClasses[(Math.random() * len) | 0];
    };

    return ActionManager;

  })();

  Button = (function(_super) {
    __extends(Button, _super);

    function Button() {
      var args, id;
      id = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.id = id;
      Button.__super__.constructor.apply(this, args);
      this.img = Loader.images['img/buttons.png'];
      this.width = 32;
      this.height = 32;
    }

    Button.prototype.draw = function(ctx) {
      return ctx.drawImage(this.img, this.id * 32, 0, 32, 32, this.x, this.y, 32, 32);
    };

    return Button;

  })(DisplayObject);

  ActionBar = (function(_super) {
    __extends(ActionBar, _super);

    function ActionBar(actionMgr) {
      var button, i, _i;
      this.actionMgr = actionMgr;
      ActionBar.__super__.constructor.call(this, 0, GC.stage.height - 32);
      this.buttons = [];
      for (i = _i = 0; _i < 5; i = ++_i) {
        button = new Button(0, i * 32);
        this.buttons.push(button);
        this.addChild(button);
      }
    }

    ActionBar.prototype.update = function() {
      var actions, button, i, _i, _len, _ref;
      if (!this.actionMgr.currentActions) {
        return;
      }
      actions = this.actionMgr.currentActions;
      _ref = this.buttons;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        button = _ref[i];
        button.id = actions[i].icon;
        button.onMouseDown = actions[i]["do"].bind(actions[i]);
      }
    };

    ActionBar.prototype.askForDirection = function(callback) {
      this.buttons[0].id = 4;
      this.buttons[1].id = 3;
      this.buttons[1].onMouseDown = callback.bind(null, new MoveLeftAction);
      this.buttons[2].id = 1;
      this.buttons[2].onMouseDown = callback.bind(null, new MoveFowardAction);
      this.buttons[3].id = 2;
      this.buttons[3].onMouseDown = callback.bind(null, new MoveRightAction);
      this.buttons[4].id = 4;
      return GC.stage.render();
    };

    return ActionBar;

  })(Layer);

  HealthBar = (function(_super) {
    __extends(HealthBar, _super);

    function HealthBar(health) {
      this.health = health != null ? health : 0;
      HealthBar.__super__.constructor.call(this, 0, 0);
      this.img = Loader.images['img/tiles.png'];
    }

    HealthBar.prototype.update = function(health) {
      this.health = health;
    };

    HealthBar.prototype.draw = function(ctx) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.health; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        ctx.drawImage(this.img, 16, 32, 16, 16, this.x + i * 16, this.y, 16, 16);
      }
    };

    return HealthBar;

  })(DisplayObject);

  ActionCounterBar = (function(_super) {
    __extends(ActionCounterBar, _super);

    function ActionCounterBar(actions) {
      this.actions = actions != null ? actions : 0;
      ActionCounterBar.__super__.constructor.call(this, 0, GC.stage.height - 32 - 16);
      this.img = Loader.images['img/tiles.png'];
    }

    ActionCounterBar.prototype.update = function(actions) {
      this.actions = actions;
    };

    ActionCounterBar.prototype.draw = function(ctx) {
      var i, _i, _j, _ref;
      for (i = _i = 0; _i <= 2; i = ++_i) {
        ctx.drawImage(this.img, 32, 32, 16, 16, this.x + 16 * i, this.y, 16, 16);
      }
      for (i = _j = 0, _ref = this.actions - 1; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        ctx.drawImage(this.img, 48, 32, 16, 16, this.x + 16 * i, this.y, 16, 16);
      }
    };

    return ActionCounterBar;

  })(DisplayObject);

  GC.canvas = document.getElementById('canvas');

  GC.stage = stage = new Stage(GC.canvas);

  Loader.onready = function() {
    var game;
    game = new Game;
    game.makeStep();
    return GC.stage.render();
  };

  Loader.load(['img/buttons.png', 'img/tiles.png', 'img/gameover.png', 'img/gamewin.png']);

}).call(this);
